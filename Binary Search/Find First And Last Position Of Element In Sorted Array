Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

class Solution {
    public int bs(int[] arr, int target, boolean left)
    {
        int low = 0, high = arr.length-1, res = -1;
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(arr[mid]==target)
            {
                res = mid;
                if(left)high = mid-1;
                else
                {
                    low = mid+1;
                }
            }
            else if(arr[mid]>target)
            {
                high = mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return res;
    }
    public int[] searchRange(int[] nums, int target) {
        int first = bs(nums, target, true);
        int last = bs(nums, target, false);
        int[] res = new int[2];
        res[0] = first;
        res[1] = last;
        return res;
    }
}
