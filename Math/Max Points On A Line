Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

 

Example 1:


Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
 

Constraints:

1 <= points.length <= 300
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.

intution : for each point maintain slope counter. But not just as a integer, as a normalized value string

class Solution {
    private static int[] calculateSlope(int[] point1, int[] point2) {
    int dx = point2[0] - point1[0];
    int dy = point2[1] - point1[1];
    
    // If both dx and dy are 0, it means the points are the same.
    if (dx == 0 && dy == 0) {
        return new int[]{0, 0};
    }
    
    // Normalize the direction vector by dividing both components by their gcd.
    int gcd = gcd(dx, dy);
    return new int[]{dx / gcd, dy / gcd};
}

private static int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
    public static int maxPoints(int[][] points) {
        if (points == null || points.length == 0) {
            return 0;
        }

        int maxPoints = 1;

        for (int i = 0; i < points.length-1; i++) {
            Map<String, Integer> slopeCount = new HashMap<>();
            int duplicates = 0;
            int localMax = 1;

            for (int j = i + 1; j < points.length; j++) {
                int[] point1 = points[i];
                int[] point2 = points[j];

                if (point1[0] == point2[0] && point1[1] == point2[1]) {
                    duplicates++;
                } else {
                    int[] slope = calculateSlope(point1, point2);
                    slopeCount.put(Arrays.toString(slope), slopeCount.getOrDefault(Arrays.toString(slope), 1) + 1);
                    localMax = Math.max(localMax, slopeCount.get(Arrays.toString(slope)));
                }
            }

            maxPoints = Math.max(maxPoints, localMax + duplicates);
        }

        return maxPoints;
    }
}
