Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null || head.next==null)return head;
        ListNode slow = head, fast = head;
        while(fast!=null)
        {
            while(fast!=null && slow.val==fast.val)
            {
                fast = fast.next;
            }
            slow.next = fast;
            slow = slow.next;
        }
        if(slow!=null)slow.next = null ;
        return head;
    }
}
