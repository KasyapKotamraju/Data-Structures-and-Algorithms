Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.


Solution 1 : 

class Solution {
    public boolean rowCheck(char[][] board, int row, int col)
    {
        Map<Character, Integer> mp = new HashMap<>();
        for(int i = 0; i<9; i++)
        {
            if(board[row][i]!='.')
            {
                if(mp.containsKey(board[row][i]))return false;
                else mp.put(board[row][i], 1);
            }
        }
        return true;
    }
    public boolean colCheck(char[][] board, int row, int col)
    {
        Map<Character, Integer> mp = new HashMap<>();
        for(int i = 0; i<9; i++)
        {
            if(board[i][col]!='.')
            {
                if(mp.containsKey(board[i][col]))return false;
                else mp.put(board[i][col], 1);
            }
        }
        return true;
    }
    public boolean cellCheck(char[][] board, int row, int col)
    {
        Map<Character, Integer> mp = new HashMap<>();
        int p = row/3 * 3, q = col/3 * 3;
        for(int i = p; i<p+3; i++)
        {
            for(int j = q; j<q+3; j++)
            {
                if(board[i][j]!='.')
                {
                    if(mp.containsKey(board[i][j]))return false;
                    else mp.put(board[i][j], 1);
                }
            }
        }
        return true;
    }
    public boolean isValidSudoku(char[][] board) {
        if(board==null || board.length ==0)return false;
        for(int i=0; i<9; i++)
        {
            for(int j=0; j<9; j++)
            {
                if(board[i][j]!='.')
                {
                    if(!rowCheck(board, i, j) || !colCheck(board, i, j) || !cellCheck(board, i, j))return false;
                }
            }
        }
        return true;
    }
}

Solution 2 : 
class Solution {
    public boolean isValidSudoku(char[][] board) {
        Map<String, Integer> mp = new HashMap<>();
        for(int i=0; i<9; i++)
        {
            for(int j=0; j<9; j++)
            {
                if(board[i][j]!='.')
                {
                    String rowString = board[i][j] + " in row " + i;
                    String colString = board[i][j] + " in col " + j;
                    String cellString = board[i][j] + " in " + i/3 * 3 + " _ " + j/3 * 3;
                    if(mp.containsKey(rowString) || mp.containsKey(colString) || mp.containsKey(cellString)) return false;
                    else 
                    {
                        mp.put(rowString, 1);
                        mp.put(colString, 1);
                        mp.put(cellString, 1);
                    }
                }
            }
        }
        return true;
    }
}
