Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

    Open brackets must be closed by the same type of brackets.
    Open brackets must be closed in the correct order.
    Every close bracket has a corresponding open bracket of the same type.

 

Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "()[]{}"
Output: true

Example 3:

Input: s = "(]"
Output: false

 

Constraints:

    1 <= s.length <= 104
    s consists of parentheses only '()[]{}'

lass Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        HashMap<Character, Character> hm = new HashMap<>();
        hm.put(')', '(');
        hm.put('}', '{');
        hm.put(']', '[');
        for(int i=0; i<s.length(); i++)
        {
            Character temp = s.charAt(i);
            if(temp=='(' || temp=='{' || temp=='[')
            {
                st.push(temp);
            }
            else
            {
                if(!st.isEmpty() && hm.get(temp)==st.peek())
                {
                    st.pop();
                }
                else
                {
                    return false;
                }
            }
        }
        return st.isEmpty() ? true : false;
    }
}
