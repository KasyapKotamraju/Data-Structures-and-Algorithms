Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        Set<List<Integer>> st = new HashSet<>();
        List<List<Integer>> res = new ArrayList<>();
        for(int i=0; i<nums.length; i++)
        {
            int p = i + 1, q = nums.length-1;
            while(p<q)
            {
                int temp = nums[i] + nums[p] + nums[q];
                if(temp==0)
                {
                    List<Integer> lis = new ArrayList<>();
                    lis.add(nums[i]);
                    lis.add(nums[p]);
                    lis.add(nums[q]);
                    st.add(lis);
                    while(p+1<q && nums[p]==nums[p+1])p++;
                    while(q-1>p && nums[q]==nums[q-1])q--;
                    p++;
                    q--;
                }
                else if(temp < 0)
                {
                    p++;
                }
                else q--;
            }
            while(i+1<nums.length && nums[i]==nums[i+1])i++;
        }
        for(List<Integer> arr : st)
        {
            res.add(arr);
        }
        return res;
    }
}
