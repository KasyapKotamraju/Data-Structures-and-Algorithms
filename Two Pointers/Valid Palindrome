A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.

Solution1 : Without using 'Character' class in built functions

class Solution {
    public boolean isAlphaNum(char c)
    {
        int ascii = (int)c;
        if((ascii>=65 && ascii<=90) || (ascii>=97 && ascii<=122) || (ascii>=48 && ascii<=57))return true;
        else return false;
    }
    public boolean isPalindrome(String s) {
        String lI = s.toLowerCase();
        System.out.print(lI);
        int first = 0, last = lI.length()-1;
        while(first<last)
        {
            while((first < last) && !isAlphaNum(lI.charAt(first)))first++;
            while((first < last) && !isAlphaNum(lI.charAt(last)))last--;
            if(lI.charAt(first)!=lI.charAt(last))return false;
            first++;
            last--;
        }
        return true;
    }
}

Solution 2 : With using 'Character' class in built functions

class Solution {
    public boolean isPalindrome(String s) {
        if (s.isEmpty()) {
        	return true;
        }
        int start = 0;
        int last = s.length() - 1;
        while(start <= last) {
        	char currFirst = s.charAt(start);
        	char currLast = s.charAt(last);
        	if (!Character.isLetterOrDigit(currFirst )) {
        		start++;
        	} else if(!Character.isLetterOrDigit(currLast)) {
        		last--;
        	} else {
        		if (Character.toLowerCase(currFirst) != Character.toLowerCase(currLast)) {
        			return false;
        		}
        		start++;
        		last--;
        	}
        }
        return true;
    }
}
