Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
0 <= k <= 105

// solution using HashMap

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Map<Integer, ArrayList<Integer>> hm = new HashMap<>();
        for(int i=0; i<nums.length; i++)
        {
            if(hm.containsKey(nums[i]))
            {
                
                for(int i2 : hm.get(nums[i]))
                {
                    if(Math.abs(i2 - i) <= k)return true;
                }
                    hm.get(nums[i]).add(i);
            }
            else
            {
                ArrayList<Integer> arr = new ArrayList<>();
                arr.add(i);
                hm.put(nums[i], arr);
            }
        }
        return false;
    }
}

// solution using HashSet

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> set = new HashSet<Integer>();
        for(int i = 0; i < nums.length; i++){
            if(i > k) set.remove(nums[i-k-1]);
         
            if(!set.add(nums[i])) return true; //set.add will returns true(along with adding) if element is valid to be added or else will return false;
        }
        return false;
 }
}
