Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length()==0 || s.length()==1)return s.length();
        Set<Character> st = new HashSet<>();
        int start =0, end=0, res = Integer.MIN_VALUE;
        while(end<s.length()){
            if(!st.contains(s.charAt(end)))
            {
                st.add(s.charAt(end++));
                res = Math.max(res, st.size());
            }
            else
            {
                st.remove(s.charAt(start++));
            }
        }
        if(res==Integer.MIN_VALUE)return 1;
        else return res;
    }
}
