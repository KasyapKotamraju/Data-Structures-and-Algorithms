https://leetcode.com/problems/minimum-distance-between-bst-nodes/description/

Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 100].
0 <= Node.val <= 105

Solution :

Intution : Inorder traversal of BST gives nodes in sorted list
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> arr = new ArrayList<>();
    public void inOrder(TreeNode root)
    {
        if(root==null)return ;
        inOrder(root.left);
        arr.add(root.val);
        inOrder(root.right);
    }
    public int minDiffInBST(TreeNode root) {
        if(root==null)return 0;
        inOrder(root);
        int result = Integer.MAX_VALUE;
        for(int i=1; i<arr.size(); i++)
        {
            result = Math.min(result, Math.abs(arr.get(i)-arr.get(i-1)));
        }
        return result;
    }
}
