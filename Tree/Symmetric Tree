https://leetcode.com/problems/symmetric-tree/description/

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

Solution :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null)return true;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            List<TreeNode> levelNode = new ArrayList<>();
            int size = q.size();
            for(int i=0; i<size; i++){
                levelNode.add(q.poll());
            }
            int low = 0, high = levelNode.size()-1;
            while(low<high){
                Integer leftVal = levelNode.get(low)==null? null : levelNode.get(low).val;
                Integer rightVal = levelNode.get(high)==null?null:levelNode.get(high).val;
                if(leftVal!=rightVal)return false;
                low++;
                high--;
            }
            for(TreeNode ele : levelNode){
                if(ele!=null){
                    q.offer(ele.left);
                    q.offer(ele.right);
                }
            }
        }
        return true;
    }
}
