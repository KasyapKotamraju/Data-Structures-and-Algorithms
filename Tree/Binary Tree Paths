https://leetcode.com/problems/binary-tree-paths/description/

Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100

Solution :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> helper(TreeNode root, String curr)
    {
        List<String> arr = new ArrayList<>();
        List<String> leftPaths = new ArrayList<>();
        List<String> rightPaths = new ArrayList<>();
        if(root.left==null && root.right==null)
        {
            String str =  "" + root.val;
            arr.add(str);
            return arr;
        }
        if(root.left!=null) leftPaths = helper(root.left, "");
        if(root.right!=null) rightPaths = helper(root.right, "");
        for(int i=0; i<leftPaths.size(); i++)
        {
            String temp = leftPaths.get(i);
            temp = "" + root.val + "->" + temp;
            arr.add(temp);
        }
        for(int i=0; i<rightPaths.size(); i++)
        {
            String temp = rightPaths.get(i);
            temp = "" + root.val + "->" + temp;
            arr.add(temp);
        }
        return arr;
    }
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if(root==null)return paths;
        return helper(root, "");

    }
}
