Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104

class Solution {
    public int[] findLefts(int[] arr)
    {
        int lefts[] = new int[arr.length];
        lefts[0] = -1;
        for(int i=1; i<arr.length; i++)
        {
            int p = i - 1;
            while(p>=0 && arr[p]>=arr[i])
            {
                p = lefts[p];
            }
            // p++;
            lefts[i] = p;
        }
        for(int num : lefts)
        {
            System.out.print(num + " ");
        }
        System.out.println();
        return lefts;
    }
    public int[] findRights(int[] arr)
    {
        int rights[] = new int[arr.length];
        rights[arr.length-1] = arr.length;
        for(int i=arr.length-2; i>=0; i--)
        {
            int p = i + 1;
            while(p<arr.length && arr[p]>=arr[i])
            {
                p = rights[p];
            }
            // p--;
            rights[i] = p;
        }
        for(int num : rights)
        {
            System.out.print(num + " ");
        }
        return rights;
    }
    public int largestRectangleArea(int[] heights) {
        int left[] = findLefts(heights);
        int right[] = findRights(heights);
        int ans = Integer.MIN_VALUE;
        for(int i=0; i<heights.length; i++)
        {
            ans = Math.max(ans, heights[i] * (right[i] - left[i] - 1));
        }
        return ans;
    }
}
