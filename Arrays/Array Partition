https://leetcode.com/problems/array-partition/description/

Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

 

Example 1:

Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.
Example 2:

Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.
 

Constraints:

1 <= n <= 104
nums.length == 2 * n
-104 <= nums[i] <= 104

Solution :

Intution :
Let us consider each pair as (ai, bi) where ai < bi. Then the required solution is to maximize sum of minimum numbers in all the pairs.
Let us call it as Sm = a1 + a2 + a3 + ....... + an
Now let us call total sum of arrays as Sa = a1 + b1 + a2 + b2 + ....... + an + bn
Also let us call di = | bi - ai |. Then Sa = 2Sm + Sd. Where Sd = d1 + d2 + d3 + ........ + dn
Then from the above equation is Sm = Sa - Sd / 2. Here The goal is minimize the Sd as low as possible. It is only possible when pairs are formed 
after sorting. In that case only difference between consecutive elements is less.

class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int res = 0;
        for(int i=0; i<nums.length; i=i+2)
        {
            res += Math.min(nums[i], nums[i+1]);
        }
        return res;
    }
}
